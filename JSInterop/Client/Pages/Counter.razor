@page "/counter"
@inject IJSRuntime js

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @CurrentCount</p>


<div>
    <input @ref="inputElement" @bind="@CurrentCount" />
</div>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;
    private ElementReference? inputElement;

    public int CurrentCount
    {
        get => currentCount;
        set
        {
            if (currentCount != value)
            {
                currentCount = value;
                js.InvokeVoidAsync("blazorLocalStorage.set",
                nameof(CurrentCount), currentCount);
            }
        }
    }

    private void IncrementCount()
    {
        CurrentCount++;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            int c = await js.InvokeAsync<int>(
            "blazorLocalStorage.get", nameof(CurrentCount));
            currentCount = c;
        }
        catch { }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (inputElement is not null)
        {
            await js.InvokeVoidAsync("blazorFocus.set", inputElement);
        }

        var objRef = DotNetObjectReference.Create(this);
        await js.InvokeVoidAsync("blazorLocalStorage.watch", objRef);
    }



    [JSInvokable]
    public async Task UpdateCounter()
    {
        int c = await js.InvokeAsync<int>("blazorLocalStorage.get",
        nameof(CurrentCount));
        currentCount = c;
        this.StateHasChanged();
    }
}
